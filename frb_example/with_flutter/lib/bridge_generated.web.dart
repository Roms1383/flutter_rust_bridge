// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.48.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names

import "bridge_definitions.dart";
import 'dart:convert';
import 'dart:async';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'bridge_generated.dart';
export 'bridge_generated.dart';
import 'dart:developer';
import 'package:meta/meta.dart';

class FlutterRustBridgeExamplePlatform extends FlutterRustBridgeBase<FlutterRustBridgeExampleWire>
    with FlutterRustBridgeSetupMixin {
  FlutterRustBridgeExamplePlatform(FutureOr<WasmModule> dylib) : super(FlutterRustBridgeExampleWire(dylib)) {
    setupMixinConstructor();
  }
  Future<void> setup() => inner.init;
// Section: api2wire

  @protected
  String api2wire_String(String raw) {
    return raw;
  }

  @protected
  List<dynamic> api2wire_box_autoadd_point(Point raw) {
    return api2wire_point(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_size(Size raw) {
    return api2wire_size(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_tree_node(TreeNode raw) {
    return api2wire_tree_node(raw);
  }

  @protected
  List<dynamic> api2wire_list_size(List<Size> raw) {
    return raw.map(api2wire_size).toList();
  }

  @protected
  List<dynamic> api2wire_list_tree_node(List<TreeNode> raw) {
    return raw.map(api2wire_tree_node).toList();
  }

  @protected
  List<dynamic> api2wire_point(Point raw) {
    return [api2wire_f64(raw.x), api2wire_f64(raw.y)];
  }

  @protected
  List<dynamic> api2wire_size(Size raw) {
    return [api2wire_i32(raw.width), api2wire_i32(raw.height)];
  }

  @protected
  List<dynamic> api2wire_tree_node(TreeNode raw) {
    return [api2wire_String(raw.name), api2wire_list_tree_node(raw.children)];
  }

  @protected
  Uint8List api2wire_uint_8_list(Uint8List raw) {
    return raw;
  }
}

// Section: WASM wire module

@JS('wasm_bindgen')
external FlutterRustBridgeExampleWasmModule get wasmModule;

@JS()
@anonymous
class FlutterRustBridgeExampleWasmModule implements WasmModule {
  external Object /* Promise */ call([String? moduleName]);
  external FlutterRustBridgeExampleWasmModule bind(dynamic thisArg, String moduleName);
  external void wire_draw_mandelbrot(
      NativePortType port_, List<dynamic> image_size, List<dynamic> zoom_point, double scale, int num_threads);

  external void wire_passing_complex_structs(NativePortType port_, List<dynamic> root);

  external void wire_returning_structs_with_boxed_fields(NativePortType port_);

  external void wire_off_topic_memory_test_input_array(NativePortType port_, Uint8List input);

  external void wire_off_topic_memory_test_output_zero_copy_buffer(NativePortType port_, int len);

  external void wire_off_topic_memory_test_output_vec_u8(NativePortType port_, int len);

  external void wire_off_topic_memory_test_input_vec_of_object(NativePortType port_, List<dynamic> input);

  external void wire_off_topic_memory_test_output_vec_of_object(NativePortType port_, int len);

  external void wire_off_topic_memory_test_input_complex_struct(NativePortType port_, List<dynamic> input);

  external void wire_off_topic_memory_test_output_complex_struct(NativePortType port_, int len);

  external void wire_off_topic_deliberately_return_error(NativePortType port_);

  external void wire_off_topic_deliberately_panic(NativePortType port_);
}

// Section: WASM wire connector

class FlutterRustBridgeExampleWire extends FlutterRustBridgeWasmWireBase<FlutterRustBridgeExampleWasmModule> {
  FlutterRustBridgeExampleWire(FutureOr<WasmModule> module)
      : super(WasmModule.cast<FlutterRustBridgeExampleWasmModule>(module));

  void wire_draw_mandelbrot(
          NativePortType port_, List<dynamic> image_size, List<dynamic> zoom_point, double scale, int num_threads) =>
      wasmModule.wire_draw_mandelbrot(port_, image_size, zoom_point, scale, num_threads);

  void wire_passing_complex_structs(NativePortType port_, List<dynamic> root) =>
      wasmModule.wire_passing_complex_structs(port_, root);

  void wire_returning_structs_with_boxed_fields(NativePortType port_) =>
      wasmModule.wire_returning_structs_with_boxed_fields(port_);

  void wire_off_topic_memory_test_input_array(NativePortType port_, Uint8List input) =>
      wasmModule.wire_off_topic_memory_test_input_array(port_, input);

  void wire_off_topic_memory_test_output_zero_copy_buffer(NativePortType port_, int len) =>
      wasmModule.wire_off_topic_memory_test_output_zero_copy_buffer(port_, len);

  void wire_off_topic_memory_test_output_vec_u8(NativePortType port_, int len) =>
      wasmModule.wire_off_topic_memory_test_output_vec_u8(port_, len);

  void wire_off_topic_memory_test_input_vec_of_object(NativePortType port_, List<dynamic> input) =>
      wasmModule.wire_off_topic_memory_test_input_vec_of_object(port_, input);

  void wire_off_topic_memory_test_output_vec_of_object(NativePortType port_, int len) =>
      wasmModule.wire_off_topic_memory_test_output_vec_of_object(port_, len);

  void wire_off_topic_memory_test_input_complex_struct(NativePortType port_, List<dynamic> input) =>
      wasmModule.wire_off_topic_memory_test_input_complex_struct(port_, input);

  void wire_off_topic_memory_test_output_complex_struct(NativePortType port_, int len) =>
      wasmModule.wire_off_topic_memory_test_output_complex_struct(port_, len);

  void wire_off_topic_deliberately_return_error(NativePortType port_) =>
      wasmModule.wire_off_topic_deliberately_return_error(port_);

  void wire_off_topic_deliberately_panic(NativePortType port_) => wasmModule.wire_off_topic_deliberately_panic(port_);
}

Future<Uint8List> wireBenchDrawMandelbrot(FlutterRustBridgeExampleImpl bridge, String? timelineTaskName,
    {required Size imageSize, required Point zoomPoint, required double scale, required int numThreads}) async {
  final stopwatch = Stopwatch();
  final int starts = stopwatch.elapsedMicroseconds;
  stopwatch.start();
  return bridge
      .drawMandelbrot(imageSize: imageSize, zoomPoint: zoomPoint, scale: scale, numThreads: numThreads)
      .then((value) => value)
      .whenComplete(() {
    stopwatch.stop();
    final int ends = stopwatch.elapsedMicroseconds;
    final int diff = ends - starts;
    if (timelineTaskName != null && timelineTaskName.isNotEmpty) {
      print('Bench [$timelineTaskName] draw_mandelbrot executed in $diff microsecond(s)');
    } else {
      print('Bench draw_mandelbrot executed in $diff microsecond(s)');
    }
  });
}

Future<String> wireBenchPassingComplexStructs(FlutterRustBridgeExampleImpl bridge, String? timelineTaskName,
    {required TreeNode root}) async {
  final stopwatch = Stopwatch();
  final int starts = stopwatch.elapsedMicroseconds;
  stopwatch.start();
  return bridge.passingComplexStructs(root: root).then((value) => value).whenComplete(() {
    stopwatch.stop();
    final int ends = stopwatch.elapsedMicroseconds;
    final int diff = ends - starts;
    if (timelineTaskName != null && timelineTaskName.isNotEmpty) {
      print('Bench [$timelineTaskName] passing_complex_structs executed in $diff microsecond(s)');
    } else {
      print('Bench passing_complex_structs executed in $diff microsecond(s)');
    }
  });
}

Future<BoxedPoint> wireBenchReturningStructsWithBoxedFields(
    FlutterRustBridgeExampleImpl bridge, String? timelineTaskName) async {
  final stopwatch = Stopwatch();
  final int starts = stopwatch.elapsedMicroseconds;
  stopwatch.start();
  return bridge.returningStructsWithBoxedFields().then((value) => value).whenComplete(() {
    stopwatch.stop();
    final int ends = stopwatch.elapsedMicroseconds;
    final int diff = ends - starts;
    if (timelineTaskName != null && timelineTaskName.isNotEmpty) {
      print('Bench [$timelineTaskName] returning_structs_with_boxed_fields executed in $diff microsecond(s)');
    } else {
      print('Bench returning_structs_with_boxed_fields executed in $diff microsecond(s)');
    }
  });
}

Future<int> wireBenchOffTopicMemoryTestInputArray(FlutterRustBridgeExampleImpl bridge, String? timelineTaskName,
    {required Uint8List input}) async {
  final stopwatch = Stopwatch();
  final int starts = stopwatch.elapsedMicroseconds;
  stopwatch.start();
  return bridge.offTopicMemoryTestInputArray(input: input).then((value) => value).whenComplete(() {
    stopwatch.stop();
    final int ends = stopwatch.elapsedMicroseconds;
    final int diff = ends - starts;
    if (timelineTaskName != null && timelineTaskName.isNotEmpty) {
      print('Bench [$timelineTaskName] off_topic_memory_test_input_array executed in $diff microsecond(s)');
    } else {
      print('Bench off_topic_memory_test_input_array executed in $diff microsecond(s)');
    }
  });
}

Future<Uint8List> wireBenchOffTopicMemoryTestOutputZeroCopyBuffer(
    FlutterRustBridgeExampleImpl bridge, String? timelineTaskName,
    {required int len}) async {
  final stopwatch = Stopwatch();
  final int starts = stopwatch.elapsedMicroseconds;
  stopwatch.start();
  return bridge.offTopicMemoryTestOutputZeroCopyBuffer(len: len).then((value) => value).whenComplete(() {
    stopwatch.stop();
    final int ends = stopwatch.elapsedMicroseconds;
    final int diff = ends - starts;
    if (timelineTaskName != null && timelineTaskName.isNotEmpty) {
      print('Bench [$timelineTaskName] off_topic_memory_test_output_zero_copy_buffer executed in $diff microsecond(s)');
    } else {
      print('Bench off_topic_memory_test_output_zero_copy_buffer executed in $diff microsecond(s)');
    }
  });
}

Future<Uint8List> wireBenchOffTopicMemoryTestOutputVecU8(FlutterRustBridgeExampleImpl bridge, String? timelineTaskName,
    {required int len}) async {
  final stopwatch = Stopwatch();
  final int starts = stopwatch.elapsedMicroseconds;
  stopwatch.start();
  return bridge.offTopicMemoryTestOutputVecU8(len: len).then((value) => value).whenComplete(() {
    stopwatch.stop();
    final int ends = stopwatch.elapsedMicroseconds;
    final int diff = ends - starts;
    if (timelineTaskName != null && timelineTaskName.isNotEmpty) {
      print('Bench [$timelineTaskName] off_topic_memory_test_output_vec_u8 executed in $diff microsecond(s)');
    } else {
      print('Bench off_topic_memory_test_output_vec_u8 executed in $diff microsecond(s)');
    }
  });
}

Future<int> wireBenchOffTopicMemoryTestInputVecOfObject(FlutterRustBridgeExampleImpl bridge, String? timelineTaskName,
    {required List<Size> input}) async {
  final stopwatch = Stopwatch();
  final int starts = stopwatch.elapsedMicroseconds;
  stopwatch.start();
  return bridge.offTopicMemoryTestInputVecOfObject(input: input).then((value) => value).whenComplete(() {
    stopwatch.stop();
    final int ends = stopwatch.elapsedMicroseconds;
    final int diff = ends - starts;
    if (timelineTaskName != null && timelineTaskName.isNotEmpty) {
      print('Bench [$timelineTaskName] off_topic_memory_test_input_vec_of_object executed in $diff microsecond(s)');
    } else {
      print('Bench off_topic_memory_test_input_vec_of_object executed in $diff microsecond(s)');
    }
  });
}

Future<List<Size>> wireBenchOffTopicMemoryTestOutputVecOfObject(
    FlutterRustBridgeExampleImpl bridge, String? timelineTaskName,
    {required int len}) async {
  final stopwatch = Stopwatch();
  final int starts = stopwatch.elapsedMicroseconds;
  stopwatch.start();
  return bridge.offTopicMemoryTestOutputVecOfObject(len: len).then((value) => value).whenComplete(() {
    stopwatch.stop();
    final int ends = stopwatch.elapsedMicroseconds;
    final int diff = ends - starts;
    if (timelineTaskName != null && timelineTaskName.isNotEmpty) {
      print('Bench [$timelineTaskName] off_topic_memory_test_output_vec_of_object executed in $diff microsecond(s)');
    } else {
      print('Bench off_topic_memory_test_output_vec_of_object executed in $diff microsecond(s)');
    }
  });
}

Future<int> wireBenchOffTopicMemoryTestInputComplexStruct(FlutterRustBridgeExampleImpl bridge, String? timelineTaskName,
    {required TreeNode input}) async {
  final stopwatch = Stopwatch();
  final int starts = stopwatch.elapsedMicroseconds;
  stopwatch.start();
  return bridge.offTopicMemoryTestInputComplexStruct(input: input).then((value) => value).whenComplete(() {
    stopwatch.stop();
    final int ends = stopwatch.elapsedMicroseconds;
    final int diff = ends - starts;
    if (timelineTaskName != null && timelineTaskName.isNotEmpty) {
      print('Bench [$timelineTaskName] off_topic_memory_test_input_complex_struct executed in $diff microsecond(s)');
    } else {
      print('Bench off_topic_memory_test_input_complex_struct executed in $diff microsecond(s)');
    }
  });
}

Future<TreeNode> wireBenchOffTopicMemoryTestOutputComplexStruct(
    FlutterRustBridgeExampleImpl bridge, String? timelineTaskName,
    {required int len}) async {
  final stopwatch = Stopwatch();
  final int starts = stopwatch.elapsedMicroseconds;
  stopwatch.start();
  return bridge.offTopicMemoryTestOutputComplexStruct(len: len).then((value) => value).whenComplete(() {
    stopwatch.stop();
    final int ends = stopwatch.elapsedMicroseconds;
    final int diff = ends - starts;
    if (timelineTaskName != null && timelineTaskName.isNotEmpty) {
      print('Bench [$timelineTaskName] off_topic_memory_test_output_complex_struct executed in $diff microsecond(s)');
    } else {
      print('Bench off_topic_memory_test_output_complex_struct executed in $diff microsecond(s)');
    }
  });
}

Future<int> wireBenchOffTopicDeliberatelyReturnError(
    FlutterRustBridgeExampleImpl bridge, String? timelineTaskName) async {
  final stopwatch = Stopwatch();
  final int starts = stopwatch.elapsedMicroseconds;
  stopwatch.start();
  return bridge.offTopicDeliberatelyReturnError().then((value) => value).whenComplete(() {
    stopwatch.stop();
    final int ends = stopwatch.elapsedMicroseconds;
    final int diff = ends - starts;
    if (timelineTaskName != null && timelineTaskName.isNotEmpty) {
      print('Bench [$timelineTaskName] off_topic_deliberately_return_error executed in $diff microsecond(s)');
    } else {
      print('Bench off_topic_deliberately_return_error executed in $diff microsecond(s)');
    }
  });
}

Future<int> wireBenchOffTopicDeliberatelyPanic(FlutterRustBridgeExampleImpl bridge, String? timelineTaskName) async {
  final stopwatch = Stopwatch();
  final int starts = stopwatch.elapsedMicroseconds;
  stopwatch.start();
  return bridge.offTopicDeliberatelyPanic().then((value) => value).whenComplete(() {
    stopwatch.stop();
    final int ends = stopwatch.elapsedMicroseconds;
    final int diff = ends - starts;
    if (timelineTaskName != null && timelineTaskName.isNotEmpty) {
      print('Bench [$timelineTaskName] off_topic_deliberately_panic executed in $diff microsecond(s)');
    } else {
      print('Bench off_topic_deliberately_panic executed in $diff microsecond(s)');
    }
  });
}
