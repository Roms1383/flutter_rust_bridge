// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.48.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names

import "bridge_definitions.dart";
import 'dart:convert';
import 'dart:async';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'bridge_generated.dart';
export 'bridge_generated.dart';
import 'dart:developer';
import 'package:meta/meta.dart';

class FlutterRustBridgeExampleBenchmarkSuitePlatform
    extends FlutterRustBridgeBase<FlutterRustBridgeExampleBenchmarkSuiteWire>
    with FlutterRustBridgeSetupMixin {
  FlutterRustBridgeExampleBenchmarkSuitePlatform(FutureOr<WasmModule> dylib)
      : super(FlutterRustBridgeExampleBenchmarkSuiteWire(dylib)) {
    setupMixinConstructor();
  }
  Future<void> setup() => inner.init;
// Section: api2wire

  @protected
  String api2wire_String(String raw) {
    return raw;
  }

  @protected
  List<String> api2wire_StringList(List<String> raw) {
    return raw;
  }

  @protected
  Uint8List api2wire_Uuid(UuidValue raw) {
    return api2wire_uint_8_list(raw.toBytes());
  }

  @protected
  Uint8List api2wire_Uuids(List<UuidValue> raw) {
    return api2wire_uint_8_list(api2wireConcatenateBytes(raw));
  }

  @protected
  List<dynamic> api2wire_box_autoadd_feature_uuid(FeatureUuid raw) {
    return api2wire_feature_uuid(raw);
  }

  @protected
  List<dynamic> api2wire_feature_uuid(FeatureUuid raw) {
    return [api2wire_Uuid(raw.one), api2wire_Uuids(raw.many)];
  }

  @protected
  Object api2wire_i64(int raw) {
    return castNativeBigInt(raw);
  }

  @protected
  Uint8List api2wire_uint_8_list(Uint8List raw) {
    return raw;
  }
}

// Section: WASM wire module

@JS('wasm_bindgen')
external FlutterRustBridgeExampleBenchmarkSuiteWasmModule get wasmModule;

@JS()
@anonymous
class FlutterRustBridgeExampleBenchmarkSuiteWasmModule implements WasmModule {
  external Object /* Promise */ call([String? moduleName]);
  external FlutterRustBridgeExampleBenchmarkSuiteWasmModule bind(
      dynamic thisArg, String moduleName);
  external void wire_handle_uuid(NativePortType port_, Uint8List id);

  external void wire_handle_uuids(NativePortType port_, Uint8List ids);

  external void wire_handle_uuids_convert_to_strings(
      NativePortType port_, Uint8List ids);

  external void wire_handle_nested_uuids(
      NativePortType port_, List<dynamic> ids);

  external void wire_handle_strings(NativePortType port_, List<String> strings);

  external void wire_send_i64(NativePortType port_, Object value);
}

// Section: WASM wire connector

class FlutterRustBridgeExampleBenchmarkSuiteWire
    extends FlutterRustBridgeWasmWireBase<
        FlutterRustBridgeExampleBenchmarkSuiteWasmModule> {
  FlutterRustBridgeExampleBenchmarkSuiteWire(FutureOr<WasmModule> module)
      : super(WasmModule.cast<FlutterRustBridgeExampleBenchmarkSuiteWasmModule>(
            module));

  void wire_handle_uuid(NativePortType port_, Uint8List id) =>
      wasmModule.wire_handle_uuid(port_, id);

  void wire_handle_uuids(NativePortType port_, Uint8List ids) =>
      wasmModule.wire_handle_uuids(port_, ids);

  void wire_handle_uuids_convert_to_strings(
          NativePortType port_, Uint8List ids) =>
      wasmModule.wire_handle_uuids_convert_to_strings(port_, ids);

  void wire_handle_nested_uuids(NativePortType port_, List<dynamic> ids) =>
      wasmModule.wire_handle_nested_uuids(port_, ids);

  void wire_handle_strings(NativePortType port_, List<String> strings) =>
      wasmModule.wire_handle_strings(port_, strings);

  void wire_send_i64(NativePortType port_, Object value) =>
      wasmModule.wire_send_i64(port_, value);
}

Future<UuidValue> wireBenchHandleUuid(
    FlutterRustBridgeExampleBenchmarkSuiteImpl bridge, String? timelineTaskName,
    {required UuidValue id}) async {
  final stopwatch = Stopwatch();
  final int starts = stopwatch.elapsedMicroseconds;
  stopwatch.start();
  return bridge.handleUuid(id: id).then((value) => value).whenComplete(() {
    stopwatch.stop();
    final int ends = stopwatch.elapsedMicroseconds;
    final int diff = ends - starts;
    if (timelineTaskName != null && timelineTaskName.isNotEmpty) {
      log('Bench [$timelineTaskName] handle_uuid executed in $diff microsecond(s)');
    } else {
      log('Bench handle_uuid executed in $diff microsecond(s)');
    }
  });
}

Future<List<UuidValue>> wireBenchHandleUuids(
    FlutterRustBridgeExampleBenchmarkSuiteImpl bridge, String? timelineTaskName,
    {required List<UuidValue> ids}) async {
  final stopwatch = Stopwatch();
  final int starts = stopwatch.elapsedMicroseconds;
  stopwatch.start();
  return bridge.handleUuids(ids: ids).then((value) => value).whenComplete(() {
    stopwatch.stop();
    final int ends = stopwatch.elapsedMicroseconds;
    final int diff = ends - starts;
    if (timelineTaskName != null && timelineTaskName.isNotEmpty) {
      log('Bench [$timelineTaskName] handle_uuids executed in $diff microsecond(s)');
    } else {
      log('Bench handle_uuids executed in $diff microsecond(s)');
    }
  });
}

Future<List<String>> wireBenchHandleUuidsConvertToStrings(
    FlutterRustBridgeExampleBenchmarkSuiteImpl bridge, String? timelineTaskName,
    {required List<UuidValue> ids}) async {
  final stopwatch = Stopwatch();
  final int starts = stopwatch.elapsedMicroseconds;
  stopwatch.start();
  return bridge
      .handleUuidsConvertToStrings(ids: ids)
      .then((value) => value)
      .whenComplete(() {
    stopwatch.stop();
    final int ends = stopwatch.elapsedMicroseconds;
    final int diff = ends - starts;
    if (timelineTaskName != null && timelineTaskName.isNotEmpty) {
      log('Bench [$timelineTaskName] handle_uuids_convert_to_strings executed in $diff microsecond(s)');
    } else {
      log('Bench handle_uuids_convert_to_strings executed in $diff microsecond(s)');
    }
  });
}

Future<FeatureUuid> wireBenchHandleNestedUuids(
    FlutterRustBridgeExampleBenchmarkSuiteImpl bridge, String? timelineTaskName,
    {required FeatureUuid ids}) async {
  final stopwatch = Stopwatch();
  final int starts = stopwatch.elapsedMicroseconds;
  stopwatch.start();
  return bridge
      .handleNestedUuids(ids: ids)
      .then((value) => value)
      .whenComplete(() {
    stopwatch.stop();
    final int ends = stopwatch.elapsedMicroseconds;
    final int diff = ends - starts;
    if (timelineTaskName != null && timelineTaskName.isNotEmpty) {
      log('Bench [$timelineTaskName] handle_nested_uuids executed in $diff microsecond(s)');
    } else {
      log('Bench handle_nested_uuids executed in $diff microsecond(s)');
    }
  });
}

Future<List<String>> wireBenchHandleStrings(
    FlutterRustBridgeExampleBenchmarkSuiteImpl bridge, String? timelineTaskName,
    {required List<String> strings}) async {
  final stopwatch = Stopwatch();
  final int starts = stopwatch.elapsedMicroseconds;
  stopwatch.start();
  return bridge
      .handleStrings(strings: strings)
      .then((value) => value)
      .whenComplete(() {
    stopwatch.stop();
    final int ends = stopwatch.elapsedMicroseconds;
    final int diff = ends - starts;
    if (timelineTaskName != null && timelineTaskName.isNotEmpty) {
      log('Bench [$timelineTaskName] handle_strings executed in $diff microsecond(s)');
    } else {
      log('Bench handle_strings executed in $diff microsecond(s)');
    }
  });
}

Future<int> wireBenchSendI64(
    FlutterRustBridgeExampleBenchmarkSuiteImpl bridge, String? timelineTaskName,
    {required int value}) async {
  final stopwatch = Stopwatch();
  final int starts = stopwatch.elapsedMicroseconds;
  stopwatch.start();
  return bridge.sendI64(value: value).then((value) => value).whenComplete(() {
    stopwatch.stop();
    final int ends = stopwatch.elapsedMicroseconds;
    final int diff = ends - starts;
    if (timelineTaskName != null && timelineTaskName.isNotEmpty) {
      log('Bench [$timelineTaskName] send_i64 executed in $diff microsecond(s)');
    } else {
      log('Bench send_i64 executed in $diff microsecond(s)');
    }
  });
}
