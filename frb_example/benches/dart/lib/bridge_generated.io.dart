// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.48.1.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names

import "bridge_definitions.dart";
import 'dart:convert';
import 'dart:async';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'bridge_generated.dart';
export 'bridge_generated.dart';
import 'package:meta/meta.dart';
import 'dart:ffi' as ffi;

class FlutterRustBridgeExampleBenchmarkSuitePlatform
    extends FlutterRustBridgeBase<FlutterRustBridgeExampleBenchmarkSuiteWire> {
  FlutterRustBridgeExampleBenchmarkSuitePlatform(ffi.DynamicLibrary dylib)
      : super(FlutterRustBridgeExampleBenchmarkSuiteWire(dylib));
// Section: api2wire

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_StringList> api2wire_StringList(List<String> raw) {
    final ans = inner.new_StringList_0(raw.length);
    for (var i = 0; i < raw.length; i++) {
      ans.ref.ptr[i] = api2wire_String(raw[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_Uuid(UuidValue raw) {
    return api2wire_uint_8_list(raw.toBytes());
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_Uuids(List<UuidValue> raw) {
    return api2wire_uint_8_list(api2wireConcatenateBytes(raw));
  }

  @protected
  ffi.Pointer<wire_FeatureUuid> api2wire_box_autoadd_feature_uuid(
      FeatureUuid raw) {
    final ptr = inner.new_box_autoadd_feature_uuid_0();
    _api_fill_to_wire_feature_uuid(raw, ptr.ref);
    return ptr;
  }

  @protected
  int api2wire_i64(int raw) {
    return raw;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }
// Section: api_fill_to_wire

  void _api_fill_to_wire_box_autoadd_feature_uuid(
      FeatureUuid apiObj, ffi.Pointer<wire_FeatureUuid> wireObj) {
    _api_fill_to_wire_feature_uuid(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_feature_uuid(
      FeatureUuid apiObj, wire_FeatureUuid wireObj) {
    wireObj.one = api2wire_Uuid(apiObj.one);
    wireObj.many = api2wire_Uuids(apiObj.many);
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class FlutterRustBridgeExampleBenchmarkSuiteWire
    implements FlutterRustBridgeWireBase {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  FlutterRustBridgeExampleBenchmarkSuiteWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  FlutterRustBridgeExampleBenchmarkSuiteWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  void wire_rust_metrics(
    int port_,
  ) {
    return _wire_rust_metrics(
      port_,
    );
  }

  late final _wire_rust_metricsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_rust_metrics');
  late final _wire_rust_metrics =
      _wire_rust_metricsPtr.asFunction<void Function(int)>();

  void wire_handle_uuid(
    int port_,
    ffi.Pointer<wire_uint_8_list> id,
  ) {
    return _wire_handle_uuid(
      port_,
      id,
    );
  }

  late final _wire_handle_uuidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_handle_uuid');
  late final _wire_handle_uuid = _wire_handle_uuidPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_handle_uuids(
    int port_,
    ffi.Pointer<wire_uint_8_list> ids,
  ) {
    return _wire_handle_uuids(
      port_,
      ids,
    );
  }

  late final _wire_handle_uuidsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_handle_uuids');
  late final _wire_handle_uuids = _wire_handle_uuidsPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_handle_uuids_convert_to_strings(
    int port_,
    ffi.Pointer<wire_uint_8_list> ids,
  ) {
    return _wire_handle_uuids_convert_to_strings(
      port_,
      ids,
    );
  }

  late final _wire_handle_uuids_convert_to_stringsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_handle_uuids_convert_to_strings');
  late final _wire_handle_uuids_convert_to_strings =
      _wire_handle_uuids_convert_to_stringsPtr
          .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_handle_nested_uuids(
    int port_,
    ffi.Pointer<wire_FeatureUuid> ids,
  ) {
    return _wire_handle_nested_uuids(
      port_,
      ids,
    );
  }

  late final _wire_handle_nested_uuidsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_FeatureUuid>)>>('wire_handle_nested_uuids');
  late final _wire_handle_nested_uuids = _wire_handle_nested_uuidsPtr
      .asFunction<void Function(int, ffi.Pointer<wire_FeatureUuid>)>();

  void wire_handle_strings(
    int port_,
    ffi.Pointer<wire_StringList> strings,
  ) {
    return _wire_handle_strings(
      port_,
      strings,
    );
  }

  late final _wire_handle_stringsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_StringList>)>>('wire_handle_strings');
  late final _wire_handle_strings = _wire_handle_stringsPtr
      .asFunction<void Function(int, ffi.Pointer<wire_StringList>)>();

  void wire_send_i64(
    int port_,
    int value,
  ) {
    return _wire_send_i64(
      port_,
      value,
    );
  }

  late final _wire_send_i64Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int64)>>(
          'wire_send_i64');
  late final _wire_send_i64 =
      _wire_send_i64Ptr.asFunction<void Function(int, int)>();

  ffi.Pointer<wire_StringList> new_StringList_0(
    int len,
  ) {
    return _new_StringList_0(
      len,
    );
  }

  late final _new_StringList_0Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_StringList> Function(ffi.Int32)>>(
      'new_StringList_0');
  late final _new_StringList_0 = _new_StringList_0Ptr
      .asFunction<ffi.Pointer<wire_StringList> Function(int)>();

  ffi.Pointer<wire_FeatureUuid> new_box_autoadd_feature_uuid_0() {
    return _new_box_autoadd_feature_uuid_0();
  }

  late final _new_box_autoadd_feature_uuid_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_FeatureUuid> Function()>>(
          'new_box_autoadd_feature_uuid_0');
  late final _new_box_autoadd_feature_uuid_0 =
      _new_box_autoadd_feature_uuid_0Ptr
          .asFunction<ffi.Pointer<wire_FeatureUuid> Function()>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturnStruct(
    WireSyncReturnStruct val,
  ) {
    return _free_WireSyncReturnStruct(
      val,
    );
  }

  late final _free_WireSyncReturnStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturnStruct)>>(
          'free_WireSyncReturnStruct');
  late final _free_WireSyncReturnStruct = _free_WireSyncReturnStructPtr
      .asFunction<void Function(WireSyncReturnStruct)>();
}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

class wire_FeatureUuid extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> one;

  external ffi.Pointer<wire_uint_8_list> many;
}

class wire_StringList extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<wire_uint_8_list>> ptr;

  @ffi.Int32()
  external int len;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Bool Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
