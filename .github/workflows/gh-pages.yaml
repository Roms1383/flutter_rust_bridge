name: GitHub Pages

on:
  workflow_dispatch: {}
  push:
    branches:
      - master
    paths:
      - 'book/**'
  pull_request:
    paths:
      - 'book/**'

jobs:
  deploy:
    runs-on: ubuntu-20.04
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
    steps:
      - uses: actions/checkout@v2

      # ref https://github.com/peaceiris/actions-mdbook
      - name: Setup mdBook
        uses: peaceiris/actions-mdbook@v1
        with:
          mdbook-version: 'latest'
      
      - name: Setup `mdbook-mermaid`
        run: cargo install mdbook-mermaid

      - run: mdbook build ./book

      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3
        if: ${{ github.ref == 'refs/heads/master' }}
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./book/book

  benchmark:
    needs: deploy
    # continuous-benchmark requires sensible permissions, hence why it should never be run on PRs
    # if: github.event_name != 'pull_request' # ⚠️ temporarily comment to try it out in the PR
    permissions:
      # deployments permission to deploy GitHub pages website
      deployments: write
      # contents permission to update benchmark contents in gh-pages branch
      contents: write
    runs-on: ubuntu-20.04
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
    steps:
      - uses: actions/checkout@v2

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: 1.64.0
          override: true
          components: rustfmt, clippy
      
      # Install benchmark jobs deps
      - uses: dart-lang/setup-dart@v1
        with:
          sdk: '2.17.6' # TODO upgrade later #655
      
      - name: Install dart dependencies (benchmarks)
        working-directory: ./frb_example/benches/dart
        run: dart pub get
      
      # Prepare benchmark first
      - name: Prepare benchmark
        run: cd frb_example/benches/rust && cargo build --release
      
      # Run benchmark and stores the output to a file
      - name: Run benchmark
        run: dart frb_example/benches/dart/lib/main.dart target/release/libflutter_rust_bridge_example.so | tee ./book/benches/output.txt
        env:
          JSON: true

      # Update benchmark and deploy to GitHub Pages
      - name: Store benchmark result
        uses: benchmark-action/github-action-benchmark@v1
        with:
          name: Flutter Rust Bridge Benchmark
          tool: 'customSmallerIsBetter'
          output-file-path: ./book/benches/output.txt
          # Access token to deploy GitHub Pages branch
          github-token: ${{ secrets.GITHUB_TOKEN }}
          # Push and deploy GitHub pages branch automatically
          auto-push: true
